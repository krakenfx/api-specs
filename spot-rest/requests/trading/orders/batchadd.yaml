- lang: cURL
  source: |
    // Send buy and sell BTC/USD 
    

    curl -X "POST" "https://api.kraken.com/0/private/AddOrderBatch" \
         -H 'API-Key: <YOUR-API-KEY>' \
         -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \
         -H 'Content-Type: application/json' \
         {
           "deadline": "2022-05-24T14:15:22Z",
           "nonce": "<YOUR-NOUNCE>",
           "orders": [
             {
               "close": {"ordertype": "stop-loss-limit",
                         "price": "37000",
                         "price2": "36000"},
               "ordertype": "limit",
               "price": "40000",
               "price2": "string",
               "timeinforce": "GTC",
               "type": "buy",
               "userref": "345",
               "volume": "1.2"
              },
              {
               "ordertype": "limit",
               "price": "42000",
               "starttm": "string",
               "timeinforce": "GTC",
               "type": "sell",
               "userref": "123",
               "volume": "1.2"
            }
           ],
          
           "pair": "BTC/USD",
           "validate": "false"
          }
- lang: Python
  source: |
    import time
    import os
    import requests
    import json
    import urllib.parse
    import hashlib
    import hmac
    import base64

    # Read Kraken API key and secret stored in environment variables
    api_url = "https://api.kraken.com"
    api_key = os.environ['API_KEY_KRAKEN']
    api_sec = os.environ['API_SEC_KRAKEN']

    # Attaches auth headers and returns results of a POST request
    def kraken_request(uri_path, data, api_key, api_sec):
        headers = {}
        headers['API-Key'] = api_key
        headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             
        req = requests.post((api_url + uri_path), headers=headers, json=data)
        return req

    def get_kraken_signature(urlpath, data, secret):
        postdata = json.dumps(data)
        encoded = (str(data['nonce']) + postdata).encode()
        message = urlpath.encode() + hashlib.sha256(encoded).digest()
        mac = hmac.new(base64.b64decode(secret), message, hashlib.sha512)
        sigdigest = base64.b64encode(mac.digest())
        return sigdigest.decode()
    
    # Construct the request and print the result
    resp = kraken_request('/0/private/AddOrderBatch', {
           "orders": [
             {
               "close": {"ordertype": "stop-loss-limit",
                         "price": "37000",
                         "price2": "36000"},
               "ordertype": "limit",
               "price": "40000",
               "price2": "string",
               "timeinforce": "GTC",
               "type": "buy",
               "userref": "123",
               "volume": "1.2"
              },
              {
               "ordertype": "limit",
               "price": "42000",
               "starttm": "string",
               "timeinforce": "GTC",
               "type": "sell",
               "userref": "345",
               "volume": "1.2"
            }
           ],
           "deadline": "2022-05-24T14:15:22Z",
           "nonce": "<YOUR-NOUNCE>",          
           "pair": "BTC/USD",
           "validate": "false"
          }
    , api_key, api_sec)

    print(resp.json())
# - lang: PHP
#   source: |
#     // buy 2.12345678 XBTUSD @ limit $101.9901
#     // with 2:1 leverage, with a follow up stop loss,
#     // take profit sell order: stop at -5% loss,
#     // take profit at +$10 price increase (signed stop/loss prices determined automatically using # notation):

#     require_once('KrakenAPI.php');

#     const KEY = '<YOUR-API-KEY>';
#     const SECRET = '<YOUR-MSG-SIGNATURE>';

#     $kraken = new KrakenAPI(KEY, SECRET, 'https://api.kraken.com');
#     $res = $kraken->QueryPrivate('AddOrder', [
#         'pair' => 'XXBTZUSD',
#         'type' => 'buy',
#         'ordertype' => 'limit',
#         'price' => '101.9901',
#         'volume' => '2.12345678',
#         'leverage' => '2:1',
#         'close' => [
#             'ordertype' => 'stop-loss-profit',
#             'price' => '#5%',  // stop loss price (relative percentage delta)
#             'price2' => '#10'  // take profit price (relative delta)
#         ]
#       ]);
